# metroChallenge.py (version mise √† jour pour le challenge)
# -*- coding: utf-8 -*-
"""
Script principal pour le challenge de reconnaissance des lignes de m√©tro.
Ce script charge un mod√®le pr√©-entra√Æn√©, traite toutes les images d'un dossier
et sauvegarde les d√©tections dans un fichier .mat.
"""
import numpy as np
import os
import re
from PIL import Image
import scipy.io as sio
import glob

# Importer les fonctions et classes n√©cessaires
from myMetroProcessing import FinalMetroSystem, processOneMetroImage
from evaluationV2 import evaluation

# =============================================================================
# --- PARAM√àTRES DU CHALLENGE ---
# =============================================================================

# R√©pertoire contenant les images du challenge
CHALLENGE_DIRECTORY = "BD_CHALLENGE"

# Fichier de sortie pour vos r√©sultats.
# Choisissez un nom d'√©quipe, par exemple 'results_Equipe4.mat'
OUTPUT_FILE = 'myChallengeResults.mat'

# Chemin vers votre meilleur mod√®le YOLO entra√Æn√©
MODEL_PATH = 'models/best3.pt'

# Facteur de redimensionnement utilis√©.
# Si vous avez entra√Æn√© et traitez les images √† leur taille originale, laissez 1.0
RESIZE_FACTOR = 1.0

# Fichier de v√©rit√© terrain pour l'√©valuation locale (le correcteur utilisera le sien)
GT_FILE = 'GTCHALLENGETEST.mat'


# =============================================================================
# --- PROGRAMME PRINCIPAL ---
# =============================================================================

def run_challenge():
    """
    Ex√©cute le processus complet du challenge.
    """
    print("üöÄ D√âMARRAGE DU CHALLENGE METRO...")

    # 1. Charger le mod√®le YOLO pr√©-entra√Æn√© (une seule fois)
    # -------------------------------------------------------------------------
    print(f"üß† Chargement du mod√®le depuis : '{MODEL_PATH}'")
    try:
        metro_system = FinalMetroSystem(MODEL_PATH)
        print("‚úÖ Mod√®le charg√© avec succ√®s !")
    except FileNotFoundError:
        print(f"‚ùå ERREUR CRITIQUE : Le fichier mod√®le '{MODEL_PATH}' est introuvable.")
        print("   Assurez-vous que le mod√®le est au bon endroit et que le chemin est correct.")
        return # Arr√™t du script si le mod√®le n'est pas trouv√©

    # 2. Lire les images du r√©pertoire du challenge
    # -------------------------------------------------------------------------
    image_paths = sorted(glob.glob(os.path.join(CHALLENGE_DIRECTORY, '*.JPG')))
    if not image_paths:
        print(f"‚ùå ERREUR CRITIQUE : Aucune image .JPG trouv√©e dans '{CHALLENGE_DIRECTORY}'.")
        return

    print(f"üñºÔ∏è  {len(image_paths)} images trouv√©es. D√©but du traitement...")

    # 3. Traiter toutes les images et collecter les r√©sultats
    # -------------------------------------------------------------------------
    all_results = []
    
    for img_path in image_paths:
        img_filename = os.path.basename(img_path)
        print(f"    -> Traitement de : {img_filename}")
        
        try:
            # Extraire le num√©ro de l'image (robuste √† diff√©rents formats de nom)
            match = re.search(r'\((\d+)\)', img_filename)
            if not match:
                print(f"       /!\\ Attention: Impossible d'extraire le num√©ro de l'image pour {img_filename}. On l'ignore.")
                continue
            img_num = int(match.group(1))

            # Charger l'image au format attendu par le mod√®le (numpy array, 0-1)
            im_np = np.array(Image.open(img_path).convert('RGB')) / 255.0
            
            # Appeler votre fonction de traitement qui utilise le mod√®le YOLO
            _, bd = processOneMetroImage(img_filename, im_np, img_num, RESIZE_FACTOR, 
                                         metro_system=metro_system)
            
            # Ajouter les d√©tections de cette image √† la liste globale
            if bd.shape[0] > 0:
                all_results.append(bd)
        
        except Exception as e:
            print(f"       /!\\ ERREUR inattendue lors du traitement de {img_filename}: {e}")

    # 4. Formater et sauvegarder les r√©sultats finaux
    # -------------------------------------------------------------------------
    if all_results:
        final_bd = np.concatenate(all_results, axis=0)
    else:
        # S'il n'y a eu aucune d√©tection, cr√©er un tableau vide avec la bonne structure
        final_bd = np.empty((0, 6))

    sio.savemat(OUTPUT_FILE, {'BD': final_bd})
    print(f"\nüéâ Traitement termin√© ! Les r√©sultats ont √©t√© sauvegard√©s dans '{OUTPUT_FILE}'.")
    
    return OUTPUT_FILE


if __name__ == "__main__":
    
    # √âtape 1 : G√©n√©rer le fichier de r√©sultats
    results_file = run_challenge()
    
    # √âtape 2 : Lancer l'√©valuation quantitative (pour vos tests)
    # Cette partie sera ex√©cut√©e par le correcteur avec le vrai GT.
    # Assurez-vous que le fichier GT_FILE existe pour que cette partie fonctionne.
    if results_file and os.path.exists(GT_FILE):
        print("\n\n=========================================================")
        print("--- D√âBUT DE L'√âVALUATION QUANTITATIVE ---")
        print(f"   V√©rit√© terrain: '{GT_FILE}'")
        print(f"   Vos r√©sultats : '{results_file}'")
        print("=========================================================")
        try:
            evaluation(GT_FILE, results_file, RESIZE_FACTOR)
        except FileNotFoundError:
             print(f"\n/!\\ Le fichier de v√©rit√© terrain '{GT_FILE}' n'a pas √©t√© trouv√©.")
             print("   L'√©valuation quantitative est impossible sans ce fichier.")
        except Exception as e:
            print(f"\n/!\\ Une erreur est survenue pendant l'√©valuation : {e}")
    else:
        print("\nSkipping evaluation: results file or GT file not found.")