# -*- coding: utf-8 -*-
"""
Script de challenge am√©lior√© avec syst√®me entra√Æn√©
Entra√Æne le mod√®le sur les donn√©es d'apprentissage puis l'applique au challenge
"""
import numpy as np
import os
import re
from PIL import Image
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
import scipy.io as sio
from evaluationV2 import evaluation, compareTestandRef

# Importer le syst√®me am√©lior√©
from myMetroProcessing import ImprovedMetroSystem, processOneMetroImage

# Fonction utilitaire pour dessiner des rectangles
def draw_rectangle(x1, x2, y1, y2, color):
    """Dessine un rectangle sur le plot actuel"""
    rect = Rectangle((x1, y1), x2 - x1, y2 - y1, 
                    linewidth=2, edgecolor=color, facecolor='none')
    ax = plt.gca()
    ax.add_patch(rect)

# CONFIGURATION ================================================================
challengeDirectory = "../BD_CHALLENGE"
file_out = 'teamsNN.mat'  # Vos r√©sultats
resize_factor = 1

# Dossiers pour l'entra√Ænement
training_images_folder = '../BD_METRO'  # Ajustez selon votre structure
training_gt_file = 'Apprentissage.mat'

# √âTAPE 1: ENTRA√éNEMENT DU SYST√àME ============================================
print("üéì PHASE D'ENTRA√éNEMENT")
print("="*60)

# V√©rifier que les fichiers d'entra√Ænement existent
if not os.path.exists(training_images_folder):
    print(f"‚ùå ERREUR: Dossier d'entra√Ænement '{training_images_folder}' introuvable")
    print("   Ajustez le chemin 'training_images_folder' dans le script")
    exit(1)

if not os.path.exists(training_gt_file):
    print(f"‚ùå ERREUR: Fichier de v√©rit√© terrain '{training_gt_file}' introuvable")
    print("   Copiez le fichier dans le r√©pertoire courant ou ajustez le chemin")
    exit(1)

# Cr√©er et entra√Æner le syst√®me
print("Initialisation du syst√®me de d√©tection...")
metro_system = ImprovedMetroSystem()

print("Entra√Ænement sur les donn√©es d'apprentissage...")
metro_system.train_system(training_images_folder, training_gt_file, resize_factor)

print("‚úÖ ENTRA√éNEMENT TERMIN√â")
print("="*60)

# √âTAPE 2: LECTURE DU R√âPERTOIRE DE CHALLENGE =================================
print("üîç LECTURE DU R√âPERTOIRE DE CHALLENGE")

if not os.path.exists(challengeDirectory):
    print(f"‚ùå ERREUR: R√©pertoire de challenge '{challengeDirectory}' introuvable")
    exit(1)

image_extensions = ('.png', '.jpg', '.jpeg', '.bmp', '.gif', '.tiff')
pattern = re.compile(r'\((\d+)\)')
numbered_images = []

for filename in os.listdir(challengeDirectory):
    if filename.lower().endswith(image_extensions):
        match = pattern.search(filename)
        if match:
            number = int(match.group(1))
            numbered_images.append((number, filename))

numbered_images.sort()
imageFilesList = [filename for filename in numbered_images]

print(f"üìÅ {len(imageFilesList)} images trouv√©es dans le challenge")

# √âTAPE 3: TRAITEMENT DE TOUTES LES IMAGES ====================================
print("\nüöÄ PHASE DE D√âTECTION SUR LE CHALLENGE")
print("="*60)

num_images = len(imageFilesList)
BD = []
detailed_results = []  # Pour stocker les r√©sultats d√©taill√©s

for n_val in range(num_images):
    
    # CHARGER L'IMAGE
    nom = imageFilesList[n_val][1]
    image_number = imageFilesList[n_val][0]
    print(f"\nüì∑ Image {n_val+1}/{num_images}: {nom}")
    
    im_path = os.path.join(challengeDirectory, nom)
    im = np.array(Image.open(im_path).convert('RGB')) / 255.0
    
    # TRAITER L'IMAGE avec le syst√®me entra√Æn√©
    im_resized, bd = processOneMetroImage(nom, im, image_number, resize_factor, 
                                        save_images=False, metro_system=metro_system)
    
    # Stocker les r√©sultats d√©taill√©s
    if len(bd) > 0:
        lignes_detectees = [int(detection[5]) for detection in bd]
        detailed_results.append({
            'image': nom,
            'number': image_number,
            'detections_count': len(bd),
            'lignes': lignes_detectees,
            'detections': bd.tolist()
        })
        print(f"   ‚úÖ {len(bd)} d√©tection(s): Lignes {lignes_detectees}")
    else:
        detailed_results.append({
            'image': nom,
            'number': image_number,
            'detections_count': 0,
            'lignes': [],
            'detections': []
        })
        print(f"   ‚ö†Ô∏è Aucune d√©tection")
    
    # AJOUTER AUX R√âSULTATS GLOBAUX
    BD.extend(bd.tolist())

# √âTAPE 4: SAUVEGARDE DES R√âSULTATS ===========================================
print(f"\nüíæ SAUVEGARDE DES R√âSULTATS")
print("="*60)

# Sauvegarder au format .mat
sio.savemat(file_out, {'BD': np.array(BD)})
print(f"‚úÖ R√©sultats sauvegard√©s dans '{file_out}'")

# Sauvegarder un r√©sum√© d√©taill√©
summary_file = file_out.replace('.mat', '_summary.txt')
with open(summary_file, 'w', encoding='utf-8') as f:
    f.write("R√âSUM√â DES D√âTECTIONS - CHALLENGE M√âTRO\n")
    f.write("="*50 + "\n\n")
    
    total_detections = sum(len(r['detections']) for r in detailed_results)
    images_with_detections = sum(1 for r in detailed_results if r['detections_count'] > 0)
    
    f.write(f"STATISTIQUES GLOBALES:\n")
    f.write(f"- Images trait√©es: {len(detailed_results)}\n")
    f.write(f"- Images avec d√©tections: {images_with_detections}\n")
    f.write(f"- Total d√©tections: {total_detections}\n")
    f.write(f"- Taux de d√©tection: {images_with_detections/len(detailed_results)*100:.1f}%\n\n")
    
    # Compter les lignes d√©tect√©es
    lignes_counts = {}
    for result in detailed_results:
        for ligne in result['lignes']:
            lignes_counts[ligne] = lignes_counts.get(ligne, 0) + 1
    
    f.write("R√âPARTITION PAR LIGNE:\n")
    for ligne in sorted(lignes_counts.keys()):
        f.write(f"- Ligne {ligne}: {lignes_counts[ligne]} d√©tection(s)\n")
    
    f.write(f"\nD√âTAIL PAR IMAGE:\n")
    f.write("-" * 50 + "\n")
    
    for result in detailed_results:
        f.write(f"{result['image']} (#{result['number']}): ")
        if result['detections_count'] > 0:
            f.write(f"{result['detections_count']} d√©tection(s) - Lignes: {result['lignes']}\n")
        else:
            f.write("Aucune d√©tection\n")

print(f"üìä R√©sum√© d√©taill√© sauvegard√© dans '{summary_file}'")

# √âTAPE 5: √âVALUATION QUANTITATIVE ============================================
print(f"\nüìà √âVALUATION QUANTITATIVE")
print("="*60)

try:
    # V√©rifier si le fichier de v√©rit√© terrain existe
    gt_challenge_file = 'GTCHALLENGETEST.mat'
    if os.path.exists(gt_challenge_file):
        print("√âvaluation sur les donn√©es de challenge...")
        results = evaluation(gt_challenge_file, file_out, resize_factor)
        
        # Extraire et afficher les m√©triques principales
        print("\nüéØ R√âSULTATS DE PERFORMANCE:")
        print("="*40)
        
        # Note: Ces m√©triques d√©pendent de ce que retourne la fonction evaluation()
        # Vous devrez peut-√™tre adapter selon le format exact de retour
        
    else:
        print(f"‚ö†Ô∏è Fichier de v√©rit√© terrain '{gt_challenge_file}' non trouv√©")
        print("   Impossible d'√©valuer quantitativement les r√©sultats")
        
except Exception as e:
    print(f"‚ùå Erreur lors de l'√©valuation: {e}")

# Test avec l'exemple fourni (si disponible)
try:
    if os.path.exists('teamsEX.mat'):
        print("\nüìä Comparaison avec l'exemple de r√©f√©rence:")
        evaluation('GTCHALLENGETEST.mat', 'teamsEX.mat', 0.5)
    else:
        print("‚ö†Ô∏è Fichier de r√©f√©rence 'teamsEX.mat' non trouv√©")
except Exception as e:
    print(f"‚ùå Erreur lors de la comparaison avec la r√©f√©rence: {e}")

# √âTAPE 6: STATISTIQUES FINALES ET CONSEILS ===================================
print(f"\nüèÅ TRAITEMENT TERMIN√â")
print("="*60)

print(f"üìã FICHIERS G√âN√âR√âS:")
print(f"   ‚Ä¢ {file_out} - R√©sultats au format .mat")
print(f"   ‚Ä¢ {summary_file} - R√©sum√© d√©taill√©")

print(f"\nüìä STATISTIQUES FINALES:")
print(f"   ‚Ä¢ {len(imageFilesList)} images trait√©es")
print(f"   ‚Ä¢ {len(BD)} d√©tections totales")
print(f"   ‚Ä¢ {len([r for r in detailed_results if r['detections_count'] > 0])} images avec d√©tections")

if len(BD) > 0:
    lignes_detectees = [int(detection[5]) for detection in BD]
    lignes_uniques = set(lignes_detectees)
    print(f"   ‚Ä¢ {len(lignes_uniques)} lignes diff√©rentes d√©tect√©es: {sorted(lignes_uniques)}")

print(f"\nüí° POUR AM√âLIORER LES R√âSULTATS:")
print(f"   ‚Ä¢ Analysez le fichier {summary_file} pour identifier les √©checs")
print(f"   ‚Ä¢ V√©rifiez les images sans d√©tection")
print(f"   ‚Ä¢ Ajustez les param√®tres de tol√©rance si n√©cessaire")
print(f"   ‚Ä¢ Enrichissez les donn√©es d'entra√Ænement si possible")

print(f"\nüéâ CHALLENGE TERMIN√â! Bonne chance pour l'√©valuation! üöÄ")


# FONCTION UTILITAIRE POUR AFFICHER LES R√âSULTATS ============================
def display_detection_summary():
    """Affiche un r√©sum√© visuel des d√©tections"""
    if not detailed_results:
        return
        
    # Cr√©er un graphique des statistiques
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
    
    # Graphique 1: Nombre de d√©tections par image
    image_numbers = [r['number'] for r in detailed_results]
    detection_counts = [r['detections_count'] for r in detailed_results]
    
    ax1.bar(range(len(image_numbers)), detection_counts, alpha=0.7)
    ax1.set_xlabel('Images (ordre de traitement)')
    ax1.set_ylabel('Nombre de d√©tections')
    ax1.set_title('D√©tections par image')
    ax1.grid(True, alpha=0.3)
    
    # Graphique 2: R√©partition par ligne
    if BD:
        lignes_detectees = [int(detection[5]) for detection in BD]
        lignes_uniques = sorted(set(lignes_detectees))
        lignes_counts = [lignes_detectees.count(ligne) for ligne in lignes_uniques]
        
        ax2.bar([f'L{ligne}' for ligne in lignes_uniques], lignes_counts, alpha=0.7)
        ax2.set_xlabel('Lignes de m√©tro')
        ax2.set_ylabel('Nombre de d√©tections')
        ax2.set_title('R√©partition par ligne')
        ax2.tick_params(axis='x', rotation=45)
        ax2.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('challenge_statistics.png', dpi=300, bbox_inches='tight')
    plt.show()
    
    print(f"üìä Graphiques sauvegard√©s dans 'challenge_statistics.png'")

# Appeler la fonction de r√©sum√©
if 'detailed_results' in locals() and detailed_results:
    display_detection_summary()